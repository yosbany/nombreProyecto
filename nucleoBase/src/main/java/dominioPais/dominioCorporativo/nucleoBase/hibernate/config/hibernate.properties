#configuraciones para debug y tuning. Desactivar en produccion despues que se compruebe que el sql generado es lo mas eficiente posible
hibernate.show_sql=true
#valida que los mapeos se corresponden con el esquema de la base de datos que se esta utilizando (si se desactiva, la base de datos lentamente va apartandose de la realidad de los mapeos hasta que no se corresponden en absoluto y los errores se muestran en tiempo de ejecucion.)
#NO COMENTAR. Para desactivar se configura asi: hibernate.hbm2ddl.auto= 
hibernate.hbm2ddl.auto=validate
#para generar las estadisticas de Hibernate. bueno para tunear, pero debe desactivarse en desarrollo y en produccion una vez que termine el tuneo, dado que hace mas lenta la carga de la aplicacion y aumenta el consumo de memoria.
hibernate.generate_statistics=false
#fin configuraciones de debug y tuning
#configuracion del pool de conexiones de c3p0
hibernate.c3p0.minPoolSize=2
hibernate.c3p0.maxPoolSize=5
hibernate.c3p0.acquireRetryAttempts=5
hibernate.c3p0.acquireIncrement=2
hibernate.c3p0.idleConnectionTestPeriod=5
hibernate.c3p0.maxIdleTime=300
hibernate.c3p0.maxIdleTimeExcessConnections=5
hibernate.c3p0.numHelperThreads=2
#Solo para debugging, imprime el stacktrace de las conexiones idles. para que funcione, tiene que setearse el unreturnedConnectionTimeout a algo que no sea cero, y la app tiene que correr por mas tiempo que el configurado.
hibernate.c3p0.debugUnreturnedConnectionStackTraces=true 
#Solo para debugging, implica que cuando una aplicacion saca una conexion del pool y no la regresa (da close()) en menos tiempo del especificado, el pool la cierra par evitar memory leaks. Esto puede causar un problema con conexiones que pasan mucho tiempo abiertas.
hibernate.c3p0.unreturnedConnectionTimeout=0